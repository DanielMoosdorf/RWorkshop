[["index.html", "R Workshop - Sozialwissenschaften Vorwort 0.1 Voraussetzungen 0.2 Warum R? 0.3 Was ist R? 0.4 Aller Einstieg ist schwer?! 0.5 Typographie 0.6 Weiterführende Literatur", " R Workshop - Sozialwissenschaften Yannick Diehl und Daniel Moosdorf 2021-05-05 Vorwort Dieser Workshop richtet sich insbesondere an Studierende der Sozialwissenschaften und möchte einen einfachen und verständlichen Einstieg in statistische Auswertungen mit R bieten. Ein besonderer Augenmerk liegt auf Anwender:innen die eine neue Heimat zur Lösung statistischer Aufgaben- und Problemstellungen suchen und folgend Kenntnisse im Umgang mit (u.a. kommerziellen) Statistik- und Analyse-Software besitzen (v.a. SPSS). Anwendungsziel der kommenden Analysetechniken sind insbesondere sozialwissenschaftliche Studien/Bevölkerungsumfragen mit wissenschaftlichen Erhebungsstandards, wenngleich auch “unstandartisierte” Datensätze mit den vorzustellenden Techniken verarbeitet werden können. Zudem soll den künftigen Anwender:innen eine umfassende Funktionsbibliothek an die Hand gegeben werden, welche eine komplexe Gewichtung von Studiendaten erlaubt. 0.1 Voraussetzungen Bitte installieren Sie hierfür die aktuelle Version von R unter: R Programm - Version 4.0.4 (02.05.2021) Darüber hinaus werden wir mit der integrierten Entwicklungsumgebung (IDE) RStudio arbeiten. Die aktuelle Version findet sich unter: RStudio Desktop Intergrierte Entwicklungsumgebungen wie RStudio vereinfachen den Arbeitprozess mit der Programmiersprache R ungemein, wenngleich auch schon im ersten Installationsschritt über das R Programm die gleichen Funktionsanwendungen ausführbar sind. So stellt RStudio vor allem eine Vereinfachung des Arbeitsprozesses dar, obgleich mit weitreichenden Implikationen bei der Nachvollziehbarkeit von Ablaufschritten und Anwendungsverfahren. 0.2 Warum R? R ist eine Programmiersprache, die speziell für statistische Berechnungen und Visualisierungen von Daten konzipiert ist. R ist eine der führenden Lösungen für die statistische Datenanalyse und kann auch für das Data Mining oder Predictive Analytics eingesetzt werden. Daten lassen sich mit der Sprache sehr flexibel auswerten und visualisieren. Sowohl wissenschaftliche Organisationen als auch große Unternehmen wie Oracle oder Microsoft verwenden R umfassend. R kann problemlos in alle Ebenen der Analyse und Präsentation von Daten integriert werden. Dank der Flexibilität von R ist der gleiche Code sowohl für kleinere Datenanalysen als auch für umfangreiches Data Mining im Big-Data-Umfeld geeignet. Die Plattformunabhängigkeit sorgt dafür, dass R in verschiedenste IT-Strukturen leicht integrierbar und universell nutzbar ist. Und zuletzt: Im Gegensatz zu anderen Lösungen für die Analyse und Visualisierung von Daten ist R Open Source. Es fallen keine Lizenzkosten an, auch nicht für den Großteil der verfügbaren Erweiterungspakete. 0.3 Was ist R? R wurde 1992 von Ross Ihaka und Robert Gentleman an der Universität Auckland entwickelt und wird als Open Source-Software unter der GNU General Public License durch die in Wien ansässige R Foundation for Statistical Computing verwaltet und verbreitet. R stammt direkt von der kommerziellen statistischen Programmiersprache S ab und während das Herz von R durch das R (Development) Core Team (aus dem auch die Stiftung hervorgegangen ist) weiterentwickelt wird, liegt die eigentliche Stärke von R in der Verfügbarkeit von Zusatzfunktionen, in Form sogenannter Packages. So erweitern unabhängige Entwickler überall auf der Welt durch unzählige Packages mit unterschiedlichsten Ausrichtungen die Funktionsmöglichkeit von R, angefangen von der klassichen Regression bis zum maschinellen Lernen. Mehr als 12.000 dieser Funktionspakete, die geschätzt mehr als 220.000 Funktionen beinhalten, stehen über das Comprehensive R Archive Network (CRAN) und einige weitere Hubs zur kostenfreien Verfügung. Folglich gibt es praktisch kein statistisches Problem, dass noch nicht eine entsprechende Lösung in R gefunden hat und damit gebrauchsfertig heruntergeladen und nach eigenen Vorstellungen modifiziert werden kann. 0.4 Aller Einstieg ist schwer?! Wir werden uns primär mit R als Statistikumgebung und weniger als klassische Programmierumgebung beschäftigen, wenngleich kleinere Exkurse in die Fundamente dieser Sprache nicht vermieden werden können. Unser Anspruch bleibt dabei immer eine einfache, konsistente und übersichtliche Lösung zu geben, um dem freien und selbstbestimmten Lernen und Arbeiten aller Teilnehmenden Sorge zu tragen. Um diesem Anspruch gerecht werden zu können, werden wir uns vornehmlich in relativ “abgeschlossenen” Ökosystemen (Ecosystems) bewegen, also Sammlungen von Packages, die aufeinander abgestimmt wurden. Das bekannteste Beispiel ist hierfür sicherlich das tidyverse, welches maßgebend von einem der großen R-Pioniere und RStudio chief scientist Hadley Wickham entwickelt wurde. Auf Grundlage des selbigen werden wir noch die Packages von Daniel Lüdecke strengejacke und die beeindruckenden Modellaufbereitungen in easystats kennen lernen. So repräsentieren diese Packages in vollem Umfang den “state-of-the-art” sozialwissenschaftlicher Datenanalysetechniken, obgleich der Lernprozess damit deutlich vereinfacht ist. Zudem werden alle genannten Packages, vor allem das tidyverse, auch in nicht-universitären Kontexten weitreichend genutzt. 0.5 Typographie Die folgenden Kapitel bestehen zu einem großen Teil aus R Code und damit aus den entsprechenden chunks. Damit können sie leicht erkannt und für den eigenen Gebrauch in das persönliche R Script kopiert werden. Ein Beispiel: x &lt;- seq(from = 1, to = 100, by = 10) x Das Ergebnis lässt sich folgend in der Konsole ablesen. ## [1] 1 11 21 31 41 51 61 71 81 91 Damit ist x unser Input und ## [1] 1 11 21 31 41 51 61 71 81 91 unser Output nachdem wir x eine Zahlensequenz zwischen 1 und 100 in 10er Schritten zugewiesen haben. 0.6 Weiterführende Literatur Wir orientieren uns vor allem in den ersten beiden Kapiteln unseres Workshops an dem Kurs: Einführung in R von Andrew Ellis und Boris Mayer. Grundständige Literatur, die auch zu diesem Workshop passt, findet sich als freie Publikation von Garrett Grolemund und Hadley Wickham unter dem Titel R for Data Science. Zur Vertiefung bieten sich die Bücher Hands-On Programming with R von Garrett Grolemund und Advanced R von Hadley Wickham an. "],["rstudio.html", "1 RStudio 1.1 Benutzeroberfläche 1.2 Optionen 1.3 Die Konsole 1.4 Das Environment und History 1.5 Files 1.6 Packages 1.7 Help", " 1 RStudio In einem ersten Schritt wollen wir uns RStudio genauer ansehen. Öffnen Sie nun bitte RStudio. 1.1 Benutzeroberfläche Sie sollten ungefähr die gleiche Benutzeroberfläche bzw. GUI (Graphical User Interface) vor sich sehen (standardmäßig weiß): 1.2 Optionen Wir empfehlen eindrücklich vor Beginn einer intensiven Nutzung mit RStudio die folgenden Punkte in den Optionen unter Preferencesbzw. Global Options zu deaktivieren. Restore .RData into workspace at startup (deaktivieren) Save workspace to .RData on exit (Never) Folgend müssen wir immer alle Daten und Variablen bei einem Neustart von RStudio neu laden. Belohnt werden wir hingegen durch einen frischen Workspace. Sofern Sie Interesse an einer Änderungen der grafischen Darstellung von RStudio haben (z.B. eine dunkle Farbgebung), sollten Sie sich unter dem Menüpunkt Appearance ausprobieren. 1.3 Die Konsole Die R Konsole ist praktisch das Herzstück der Benutzeroberfläche und ermöglicht geschriebenen Code direkt oder über das R Script interpretieren zu lassen. Das &gt; Zeichen ist die R Prompt (das Aufforderungszeichen). Die Konsole kann gerne auch als Übungsfeld für die ersten Eingaben genutzt werden, z.B. als Taschenrechner. 2+3 ## [1] 5 1.4 Das Environment und History Im Reiter Enironment finden wir die Funktion Global Environment (drop-down menu). In diesem Bereich werden alle Objekte, also Variablen und Datensätze, die wir zuvor angelegt haben, gespeichert. Auch selbstgeschriebene Funktionen werden hier hinterlegt. Unter dem Reiter History finden Sie alle Befehle, die Sie bisher ausgeführt haben. Mit einem Doppelklick werden diese automatisch in die Konsole kopiert. Damit können sie einfach modifiziert und/oder erneut ausgebenen werden. Tipp: Die History lässt sich auch direkt über die Testenbefehle cmd+ up auf macOS bzw. ctrl+ up bei Windows in der Konsole abrufen. 1.5 Files Unter dem Reiter Files können Sie auf Ihre Datenstruktur zugreifen und damit ein Arbeitsverzeichnis (working directory) festlegen (siehe Bild). Die Festlegung eines Arbeitsverzeichnis erleichtert in Folge das Einlesen von weiteren Datenobjekten (z.B. Datensätzen), sofern nicht in einem RProject gearbeitet wird. 1.6 Packages R stellt uns über base R schon eine ganze Reihe nützlicher Funktionen zur Verfügung. Dieser bewegen sich jedoch auf sehr abstarktem Niveau und würden bei ausschließlicher Nutzung viele Analyseschritte sehr aufwendig machen. Folgend greifen wir auf die versprochenen Packages bzw. Ökosysteme zurück, um unsere Funktionsbibliothek deutlich zu erweitern. Packages lassen sich mit dem folgenden Befehl in der Konsole sehr leicht installieren. install.packages(&quot;tidyverse&quot;) Damit haben wir alle Packages und Funktion aus dem tidyverse installiert. Nun wollen wir noch strengejacke und easystats installieren. install.packages(&quot;strengejacke&quot;) Das Ökosystem easystats ist gegenwärtig noch in der Testphase und damit nur über Github zu laden. Hierfür brauchen wir zwei Schritte. Zum einen installieren wir das Package remotes, um auf Github zugreifen zu können und dann easystats. install.packages(&quot;remotes&quot;) remotes::install_github(&quot;easystats/easystats&quot;) Gratulation, damit haben wir die wichtigsten Packages installiert! Nun müssen wir sie nur noch aktivieren. Dafür nutzen wir den Befehl library, um auf unsere Funktionsbibliothek zuzugreifen. library(tidyverse) library(strengejacke) library(&quot;easystats&quot;) Wichtig! Das Package easystats muss beim Aufruf in Anführungszeichen geschrieben werden. Als Alternative können wir Packages auch über den Reiter Packages installieren und aktivieren. Updates lassen sich über den folgenden Befehl machen: update.packages() bzw. update.pachakes(ask = F) 1.7 Help Selbst wenn man täglich mit R arbeitet, ist es (fast) unmöglich, sich alle Funktionen zu merken. R hat ein sehr gutes, eingebautes Hilfesystem, welches aber für Anfänger nicht ganz leicht verständlich ist. Dies ist im Bereich Help zugänglich: "]]
