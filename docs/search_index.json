[["index.html", "R Workshop - Sozialwissenschaften Vorwort 0.1 Voraussetzungen 0.2 Warum R? 0.3 Was ist R? 0.4 Aller Einstieg ist schwer?! 0.5 Typographie 0.6 Weiterführende Literatur", " R Workshop - Sozialwissenschaften Yannick Diehl und Daniel Moosdorf 2021-05-20 Vorwort Dieser Workshop richtet sich insbesondere an Studierende der Sozialwissenschaften und möchte einen einfachen und verständlichen Einstieg in statistische Auswertungen mit R bieten. Ein besonderer Augenmerk liegt auf Anwender:innen die eine neue Heimat zur Lösung statistischer Aufgaben- und Problemstellungen suchen und folgend Kenntnisse im Umgang mit (u.a. kommerziellen) Statistik- und Analyse-Software besitzen (v.a. SPSS). Anwendungsziel der kommenden Analysetechniken sind insbesondere sozialwissenschaftliche Studien/Bevölkerungsumfragen mit wissenschaftlichen Erhebungsstandards, wenngleich auch “unstandartisierte” Datensätze mit den vorzustellenden Techniken verarbeitet werden können. Zudem soll den künftigen Anwender:innen eine umfassende Funktionsbibliothek an die Hand gegeben werden, welche eine komplexe Gewichtung von Studiendaten erlaubt. 0.1 Voraussetzungen Bitte installieren Sie hierfür die aktuelle Version von R unter: R Programm - Version 4.0.5 (17.05.2021) Darüber hinaus werden wir mit der integrierten Entwicklungsumgebung (IDE) RStudio arbeiten. Die aktuelle Version findet sich unter: RStudio Desktop Intergrierte Entwicklungsumgebungen wie RStudio vereinfachen den Arbeitprozess mit der Programmiersprache R ungemein, wenngleich auch schon im ersten Installationsschritt über das R Programm die gleichen Funktionsanwendungen ausführbar sind. So stellt RStudio vor allem eine Vereinfachung des Arbeitsprozesses dar, obgleich mit weitreichenden Implikationen bei der Nachvollziehbarkeit von Ablaufschritten und Anwendungsverfahren. 0.2 Warum R? R ist eine Programmiersprache, die speziell für statistische Berechnungen und Visualisierungen von Daten konzipiert ist. R ist eine der führenden Lösungen für die statistische Datenanalyse und kann auch für das Data Mining oder Predictive Analytics eingesetzt werden. Daten lassen sich mit der Sprache sehr flexibel auswerten und visualisieren. Sowohl wissenschaftliche Organisationen als auch große Unternehmen wie Oracle oder Microsoft verwenden R umfassend. R kann problemlos in alle Ebenen der Analyse und Präsentation von Daten integriert werden. Dank der Flexibilität von R ist der gleiche Code sowohl für kleinere Datenanalysen als auch für umfangreiches Data Mining im Big-Data-Umfeld geeignet. Die Plattformunabhängigkeit sorgt dafür, dass R in verschiedenste IT-Strukturen leicht integrierbar und universell nutzbar ist. Und zuletzt: Im Gegensatz zu anderen Lösungen für die Analyse und Visualisierung von Daten ist R Open Source. Es fallen keine Lizenzkosten an, auch nicht für den Großteil der verfügbaren Erweiterungspakete. 0.3 Was ist R? R wurde 1992 von Ross Ihaka und Robert Gentleman an der Universität Auckland entwickelt und wird als Open Source-Software unter der GNU General Public License durch die in Wien ansässige R Foundation for Statistical Computing verwaltet und verbreitet. R stammt direkt von der kommerziellen statistischen Programmiersprache S ab und während das Herz von R durch das R (Development) Core Team (aus dem auch die Stiftung hervorgegangen ist) weiterentwickelt wird, liegt die eigentliche Stärke von R in der Verfügbarkeit von Zusatzfunktionen, in Form sogenannter Packages (dt. Packete). So erweitern unabhängige Entwickler überall auf der Welt durch unzählige Packages mit unterschiedlichsten Ausrichtungen die Funktionsmöglichkeit von R, angefangen von der klassichen Regression bis zum maschinellen Lernen. Mehr als 12.000 dieser Funktionspakete, die geschätzt mehr als 220.000 Funktionen beinhalten, stehen über das Comprehensive R Archive Network (CRAN) und einige weitere Hubs zur kostenfreien Verfügung. Folglich gibt es praktisch kein statistisches Problem, dass noch nicht eine entsprechende Lösung in R gefunden hat und damit gebrauchsfertig heruntergeladen und nach eigenen Vorstellungen modifiziert werden kann. 0.4 Aller Einstieg ist schwer?! Wir werden uns primär mit R als Statistikumgebung und weniger als klassische Programmierumgebung beschäftigen, wenngleich kleinere Exkurse in die Fundamente dieser Sprache nicht vermieden werden können. Unser Anspruch bleibt dabei immer eine einfache, konsistente und übersichtliche Lösung zu geben, um dem freien und selbstbestimmten Lernen und Arbeiten aller Teilnehmenden Sorge zu tragen. Um diesem Anspruch gerecht werden zu können, werden wir uns vornehmlich in relativ “abgeschlossenen” Ökosystemen (Ecosystems) bewegen, also Sammlungen von Packeten, die aufeinander abgestimmt wurden. Das bekannteste Beispiel ist hierfür sicherlich das tidyverse, welches maßgebend von einem der großen R-Pioniere und RStudio chief scientist Hadley Wickham entwickelt wurde. Auf Grundlage des selbigen werden wir noch die Packete von Daniel Lüdecke strengejacke und die beeindruckenden Modellaufbereitungen in easystats kennen lernen. So repräsentieren diese Packete in vollem Umfang den “state-of-the-art” sozialwissenschaftlicher Datenanalysetechniken, obgleich der Lernprozess damit deutlich vereinfacht ist. Zudem werden alle genannten Packete, vor allem das tidyverse, auch in nicht-universitären Kontexten weitreichend genutzt. 0.5 Typographie Die folgenden Kapitel bestehen zu einem großen Teil aus R Code und damit aus den entsprechenden chunks. Damit können sie leicht erkannt und für den eigenen Gebrauch in das persönliche R Script kopiert werden. Ein Beispiel: x &lt;- seq(from = 1, to = 100, by = 10) x Das Ergebnis lässt sich folgend in der Konsole ablesen. ## [1] 1 11 21 31 41 51 61 71 81 91 Damit ist x unser Input und ## [1] 1 11 21 31 41 51 61 71 81 91 unser Output nachdem wir x eine Zahlensequenz zwischen 1 und 100 in 10er Schritten zugewiesen haben. 0.6 Weiterführende Literatur Wir orientieren uns vor allem in den ersten beiden Kapiteln unseres Workshops an dem Kurs: Einführung in R von Andrew Ellis und Boris Mayer. Grundständige Literatur, die auch zu diesem Workshop passt, findet sich als freie Publikation von Garrett Grolemund und Hadley Wickham unter dem Titel R for Data Science. Zur Vertiefung bieten sich die Bücher Hands-On Programming with R von Garrett Grolemund und Advanced R von Hadley Wickham an. "],["rstudio.html", "1 RStudio 1.1 Benutzeroberfläche 1.2 Optionen 1.3 Konsole 1.4 Environment und History 1.5 Files 1.6 Packages 1.7 Help 1.8 Arbeiten mit RStudio", " 1 RStudio In einem ersten Schritt wollen wir uns RStudio genauer ansehen. Öffnen Sie nun bitte RStudio. 1.1 Benutzeroberfläche Sie sollten ungefähr die gleiche Benutzeroberfläche bzw. GUI (Graphical User Interface) vor sich sehen (standardmäßig weiß): 1.2 Optionen Wir empfehlen eindrücklich vor Beginn einer intensiven Nutzung mit RStudio die folgenden Punkte in den Optionen unter Preferencesbzw. Global Options zu deaktivieren. Restore .RData into workspace at startup (deaktivieren) Save workspace to .RData on exit (Never) Folgend müssen wir immer alle Daten und Variablen bei einem Neustart von RStudio neu laden. Belohnt werden wir hingegen durch einen frischen Workspace. Sofern Sie Interesse an einer Änderungen der grafischen Darstellung von RStudio haben (z.B. eine dunkle Farbgebung), sollten Sie sich unter dem Menüpunkt Appearance ausprobieren. 1.3 Konsole Die R Konsole ist praktisch das Herzstück der Benutzeroberfläche und ermöglicht geschriebenen Code direkt oder über das R Script interpretieren zu lassen. Das &gt; Zeichen ist die R Prompt (das Aufforderungszeichen). Die Konsole kann gerne auch als Übungsfeld für die ersten Eingaben genutzt werden, z.B. als Taschenrechner. 2+3 ## [1] 5 1.4 Environment und History Im Reiter Enironment finden wir die Funktion Global Environment (drop-down menu). In diesem Bereich werden alle Objekte, also Variablen und Datensätze, die wir zuvor angelegt haben, gespeichert. Auch selbstgeschriebene Funktionen werden hier hinterlegt. Unter dem Reiter History finden Sie alle Befehle, die Sie bisher ausgeführt haben. Mit einem Doppelklick werden diese automatisch in die Konsole kopiert. Damit können sie einfach modifiziert und/oder erneut ausgebenen werden. Tipp: Die History lässt sich auch direkt über die Testenbefehle cmd+ up auf macOS bzw. strg+ up bei Windows in der Konsole abrufen. 1.5 Files Unter dem Reiter Files können Sie auf Ihre Datenstruktur zugreifen und damit ein Arbeitsverzeichnis (working directory) festlegen (siehe Bild). Die Festlegung eines Arbeitsverzeichnis erleichtert in Folge das Einlesen von weiteren Datenobjekten (z.B. Datensätzen), sofern nicht in einem Project gearbeitet wird. Das Arbeitsverzeichnis muss in dem Ordner gesetzt werden, indem sich auch der Datensatz bzw. die einzulesenden Daten befinden. 1.6 Packages R stellt uns über base R schon eine ganze Reihe nützlicher Funktionen zur Verfügung. Diese bewegen sich jedoch auf sehr abstarktem Niveau und würden bei ausschließlicher Nutzung viele Analyseschritte sehr aufwendig machen. Folgend greifen wir auf die versprochenen Packete bzw. Ökosysteme zurück, um unsere Funktionsbibliothek deutlich zu erweitern. Packete lassen sich mit dem folgenden Befehl in der Konsole sehr leicht installieren. install.packages(&quot;tidyverse&quot;) Damit haben wir alle Packete und Funktionen aus dem tidyverse installiert. Nun wollen wir noch strengejacke und easystats installieren. Die Packete aus strengejacke können entweder einzeln über das CRAN installiert werden, oder im Bündel über Github. Wollen wir z.B. nur das Packet sjmisc aus strengejacke installieren verwenden wir den folgenden Befehl: install.packages(&quot;sjmisc&quot;) Sofern das ganze Bündel installiert werden soll, laden wir zunächst das Packet remotes, um Github als Downloadplattform anwählen zu können und dann strengejacke. install.packages(&quot;remotes&quot;) remotes::install_github(&quot;strengejacke/strengejacke&quot;) Damit wurde strengejacke erfolgreich installiert! Das Ökosystem easystats ist gegenwärtig noch in der Testphase und damit auch nur über Github zu laden. install.packages(&quot;remotes&quot;) remotes::install_github(&quot;easystats/easystats&quot;) Gratulation, damit haben wir die wichtigsten Packete installiert! Nun müssen wir sie nur noch aktivieren. Dafür nutzen wir den Befehl library, um auf unsere Funktionsbibliothek zuzugreifen. library(tidyverse) library(strengejacke) library(&quot;easystats&quot;) Wichtig! Das Packetbündel easystats muss beim Aufruf in Anführungszeichen geschrieben werden. Als Alternative können wir Packete auch über den Reiter Packages installieren und aktivieren (oben links im Fenster). Updates lassen sich über den Reiter Packages oder den folgenden Befehl machen: update.packages() bzw. update.pachakes(ask = F) 1.7 Help Selbst wenn man täglich mit R arbeitet, ist es (fast) unmöglich, sich alle Funktionen zu merken. Deshalb bietet R über den Reiter Help die Möglichkeit eine lexikale Darstellung aller Funktionen und Anwendungsmöglichkeiten zu bekommen. Leider sind viele der Einträge zu Beginn nicht ganz leicht verständlich. Nach einiger Zeit bieten sie aber eine zuverlässige Möglichkeit neue Funktionen zu erlenen und alte nachzuschlagen. Hat man eine Funktion im Kopf lässt sich diese leicht über das Suchfenster im Help Viewer suchen. Über die Konsole geht das natürlich auch. Der Befehl hier z.B. für den gewichteten Mittelwert: ?weighted_mean Hier muss nur die gesuchte Funktion hinter ein ? geschrieben werden. Will man herausfinden, welche Funktionen in einem Packet enthalten sind, ist der Reiter Packages zu öffnen. Über das Suchfenster das entsprechende Packet suchen und mit einem Klick öffnen. Anschließend wird man im Help Viewer über die möglichen Funktionen in einer Auswahl informiert. Viele Entwickler erstellen zudem eigene Websites für ihre Packages. Hier einige Beispiele: Auf der Seite des tidyverse das gewünschte Packet aussuchen und dann über Reference eine Auswahlliste der Funktionen aufrufen. Beim Klick auf eine Funktion wird die dahinterliegende Vignette - Erklärung mit Beispielen - geöffnet. Die Packete von strengejacke haben keine gebündelte Auswahl. Wir müssen uns also zuerst eines der Packete aussuchen (sjmisc, sjlabelled, sjplot, sjstats) und dann nach diesem suchen. Bei strengejacke lassen sich alle Packete über den folgenden Link öffnen: https://strengejacke.github.io/*Packetname*/, also z.B. https://strengejacke.github.io/sjmisc/ Bei den Packeten von easystats gilt das genauso. Erst ein Packet wählen (parameters, performance, effectsize, correlation, see) und dann öffnen über: https://easystats.github.io/*Packetname*/ Tipp: Um einen erster Eindruck über die Anwendungsmöglichkeiten und die Form der Packete zu bekommen, lohnt sich zudem der Klick auf den Reiter Articles auf den Dokumentationsseiten der Packete! Abschließend ist noch die FAQ-Seite Stackoverflow zu empfehlen, auf der schier zu jedem Problem schon einmal eine Frage gestellt und diese beantwortet wurde. Hierzu lohnt es sich das eigene Problem mit dem zusätzlichen Schlagwort Stackoverflow in eine Suchmaschine zu geben und die Einträge nach Lösungen zu durchsuchen. 1.8 Arbeiten mit RStudio Auf an die praktische Arbeit mit RStudio! 1.8.1 Projects Vor der eigentlichen Arbeit mit R und der Analyse von Daten ist es immer ratsam über die Erstellung eines Projekts nachzudenken. Über den Menüpunkt File + New Project + New Directory + New Project öffnet sich die entsprechende Auswahlmaske. Hier kann ein Projektname und der gewünschte Speicherort festgelegt werden. Im nächsten Schritt schieben wir die gewünschten Datensätze in den Projektordner, um einen ungehinderten Datenzugriff zu ermöglichen. Vorteile: Alle Files werden beim Start des Projekts, über den blauen Projektwürfel (.Rproj), wieder geöffnet. Es lassen sich beliebig viele Projekte gleichzeitig öffnen und zwischen diesen wechseln. Bei der Erstellung eines Projekts wird automatisch ein Arbeitsverzeichnis erstellt, auf das zurückgegriffen wird (Projektordner). Man muss sich also nicht mehr um das working directory bemühen und kann z.B. Daten- oder Skriptdateien direkt vom Projektordner aus aufrufen, ohne jedes Mal den vollständigen Pfad definieren zu müssen. 1.8.2 Konsole oder RScript? Es stehen dem Benutzer von RStudio wesentlich zwei Nutzungswege zur Verfügung: 1. Befehle direkt über die Konsole eintippen Die Eingabe über die Konsole ist dann empfehlenswert, wenn man schnell etwas ausprobieren möchte, oder ein Befehl wiederholt werden soll. Die Konsole wird auch bei unvollständiger Eingabe von Funktionen relevant. Im folgenden Beispiel wurde eine Klammer am Ende der Funktion vergessen. &gt; seq(1, 100, 5 + Nun muss entweder die fehlende Klammer zur Vervollständigung eingetippt, oder über Escder Befehl abgebrochen werden. Wird ein Befehl ungewollt ausgeführt, oder ist R abgestürzt? Hier kann ganz leicht über Session + Interrupt R bzw. das rote Stoppschild über der Konsole der Befehl abgebrochen, oder die ganze Sitzung über Session + Terminate R neu gestartet werden. 2. Befehle im Script speichern (vergleichbar mit Syntax aus SPSS) Zur Erstellung eines RScript öffnen wir über das Symbol mit dem weißen Blatt und grünem Kreuz (oben links) ein neues RScript (Tastenkürzel: cmd bzw. strg + up + N). Vorteile sind hier, wie auch in SPSS, die Möglichkeit zur übersichtlichen und nachvollziehbaren Arbeitsweise und das Speichern von Auswertungen. Wichtig! RScript-Datein werden beim Ausführen von oben nach unten gelesen. Wir können also Werte im Laufe eines Scripts immer wieder überschreiben und neu zuweisen. Wir probieren uns zu Beginn wieder an einer kurzen Rechnung aus. 2+3 Um die entsprechende Zeile auszuführen, klicken wir auf Run (Tastenkürzel: cmd bzw. strg + enter). ## [1] 5 Der Output erscheint wie gewohnt in der Konsole. Im nächsten Schritt definieren wir das Ergebnis unserer mathematischen Operation als Variable (Objekt), um es für folgende Anwendungen nutzen zu können. var1 &lt;- 2+3 Damit haben wir unsere gewünschte Variable (Objekt) mit der Bezeichnung var1 definiert. Wichtig ist für uns erstmal, dass wir unsere definierten Variablen im Environment sehen können. var1 wird folgend mit dem Wert 5 angezeigt. 1.8.3 Tab completion RStudio verfügt über eine weitere sehr hilfreiche Funktion: Tab completion. Während der Eingabe eines beliebigen Befehls erscheint über RStudio ein entsprechendes Menu mit Befehlsvorschlägen zur Vervollständigung. So erscheint z.B. bei der Eingabe von weighted_mean() eine ganze Reihe von Vorschlägen. Manuell wird auch über Tab das gleiche Menu aufgerufen. Wollen wir die erste Funktion übernehmen, drücken wir Enter zur Bestätigung. Zur Auswahl einer anderen Funktion einfach über die Pfeiltasten die richtige Funktion ansteuern und diese über Enter anwählen. Hat man eine Funktion eingegeben und drückt man innerhalb der Klammern Tab, erscheint eine Liste mit allen Argumenten dieser Funktion. Funktionsargumente definieren welche Daten einbezogen werden sollen und wie mit diesen umgegangen wird. x = steht z.B. für die eingehenden Daten und weights = für das anzuwendende Gewicht. Überschneiden sich zwei Funktionensbezeichungen zwischen zwei Packeten oder wissen wir, dass eine Funktion in einem Packet enthalten ist, können wir auch über den Packetnamen gefolgt von :: eine Funktionsliste erzeugen. 1.8.4 Nützliche Tastenbefehle (Shortcuts) Folgende Tastenbefehle erleichtern das Arbeiten mit R. Befehl Wirkung Wir haben schon folgende Befehle kennen gelernt: cmd bzw. strg + up Vorherige Befehle in der Konsole anzeigen cmd bzw. strg + up + N Neues Script erstellen cmd bzw. strg + Enter Eingabe ausführen cmd bzw. strg + S Speichert geöffnete RScript-Datei cmd bzw. strg + option + S Speichert alle geöffneten RScript-Datein Weitere nützliche Befehle: cmd bzw. strg + up + Enter Gesamtes Script ausführen cmd bzw. strg + up + R Kapitel im RScript definieren cmd bzw. strg + up + C Kommentar im RScript control bzw. strg + L Konsole leeren cmd bzw. strg + up + A Code restrukturieren Für folgende Kapitel: option + - Zuweisungspfeil (&lt;-) erzeugen cmd bzw. strg + up + M %&lt;% erstellen Tipp: Um alle verfügbaren Tastenkürzel in RStudio sehen zu können, drücken Sie: option bzw. strg + up + K. "],["programmiersprache-r.html", "2 Programmiersprache R 2.1 Variablen definieren 2.2 Funktionen aufrufen 2.3 Objekte und Datentypen", " 2 Programmiersprache R In diesem Kapitel wollen wir R als Programmierspache kennenlernen. 2.1 Variablen definieren In einem ersten Schritt wollen wir eine Rechnung (einen Wert) in einer Variable speichern. var1 &lt;- 2*4 Unsere Variable mit dem Namen x (immer links in der Zeile) wird über den Zuweisungspfeil &lt;- (Tastenkürzel: option + -) mit dem Ergebnis aus 2*4 (8) definiert. Zur Kontrolle können wir x mit den folgenden Befehlen aufrufen. var1 #&gt; [1] 8 Man kann auch gleich bei der Definition der Variablen die Zuweisung in Klammern schreiben und das Resultat wird gleichzeitig in der Konsole angezeigt. (var1 &lt;- 2*4) #&gt; [1] 8 Tipp: Sollten Sie aus anderen Programmiersprachen schon Kenntnisse mitbringen und = als Zuweisungsoperator kennen, empfehlen wir dennoch eindringlich mit &lt;- zu arbeiten. Funktionen in R arbeiten bei der Zuweisung von Argumenten mit dem Zuweisungsoperator =. Folglich ist die Verwendung von &lt;- nicht nur besser zu lesen, sie kann auch Fehler vorbeugen. 2.1.1 Variablennamen Eine Variable muss immer einen Namen haben. Sie darf aus Buchstaben, Zahlen und den Zeichen . und _ bestehen. Dennoch muss sie immer mit einem Buchstaben beginnen und darf keine Leerzeichen enthalten. Um lesbaren und verständlichen Code zu schreiben, gibt es ein paar Konventionen an die man sich halten sollte. Hier gibt es zwei gängige Möglichkeiten und eine ältere Form, um Variablen zu bennen. Die Wahl ist egal, solange man konsequent bei einer Schreibweise bleibt! 1. snake_case_variable Bei dieser Schreibform werden die einzelnen Worten in einer Variablenbezeichnung durch Unterstriche verbunden und alle Worte kleingeschrieben. 2. camelCaseVariable Hier wird nur das erste Wort kleingeschrieben und die folgenden mit dem ersten Buchstaben großgeschrieben. 3. variable.with.perdiods (alt) Die kleingeschriebenen Worte werden mit Punkten getrennt. # Gute Bezeichnungen efaKonstrukt1 efa_konstrukt_1 # Schlechte Bezeichnungen Efa.konstrukt_1 efaKonstrukt_1 # Unmöglich efa 1 2.2 Funktionen aufrufen “Everything that exists is an object. Everything that happens is a function call.” –John Chambers Objekte haben wir schon in ihrer einfachsten Form als Rechenergebnis in einer Variable kennengelernt. Um kompliziertere Objekte verstehen zu können, wollen wir uns erst den Funktionen (function calls) in R zuwenden. Unsere Funktion sieht wie folgt aus (ein fiktionales Beispiel): functionName(arg1 = Daten, arg2 = option1, arg3) In einem ersten Schritt sehen wir uns an, welchen Namen die Funktion trägt. Unsere Funktion heißt functionName. Wir können leider nicht direkt aus dem Namen erschließen, welche Auswirkung unser function call haben wird. In so einem Fall würde ein Blick in Help (?functionName) sicher Abhilfe schaffen, wenngleich wir in unserem Beispiel leider keine Dokumentation nutzen können. So sehen wir uns in einem zweiten Schritt die Argumente unserer Funktion an. Wie wir sehen können, besitzt unsere Funktion drei Argumente: arg1, arg2 und arg3. Die Argumente werden mit spezifischen Werten über = bestückt. In unserem Beispiel benötigt das erste Argument Daten und das zweite Argument einen spezifischen Wert aus einer Auswahl an möglichen Werten - diese werden immer vom Entwickler der Funktion in der Dokumentation angegeben. Das dritte Argument wird als “default” abgerufen, also über eine Voreinstellung der Entwicklers geladen. Argumente die mit “default” arbeiten sind aber keinesfalls fest. Sie können immer auch durch andere Werte ersetzt werden. Argumente arbeiten immer dann mit “default,” wenn die Grundeinstellung des Arguments die häufigste Nutzungsform darstellt und man nicht bei jedem function call die Wertzuweisung von neuem schaffen möchte. Tipp: Wollen wir alle verfügbaren Argumente in einer Funktion sehen, drücken wir Tab. Wichtig! Eine Funktion kann beliebig viele Argumente besitzen. Um uns einer “großen” Funktion zu nähern, müssen wir zu Beginn einige “Grundfunktionen” kennenlernen. c() &gt; Combine: kreiert einen Vektor seq(from, to, by) &gt; Generiert eine Sequenz an Zahlen : &gt; Colon Operator: generiert eine reguläre Sequenz (Sequenz in Einerschritten) rep(x, times, each) &gt; Wiederholt x times: Sequenz wird n-mal wiederholt each: jedes Element wird n-mal wiederholt head(x, n = 6) &gt; Zeigt die n ersten Elemente von x an tail(x, n = 6) &gt; Zeigt die n letzten Elemente von x an print(x) &gt; Gibt Werte eines Objekts aus (vor allem bei großen Objekten wichtig) round(x, digits) &gt; Rundung von Zahlen z.B. # Daten erzeugen # Vektor erzeugen c(1, 2, 3, 4, 5) #&gt; [1] 1 2 3 4 5 # Sequenz erzeugen seq(from = 1, to = 10, by = 2) #&gt; [1] 1 3 5 7 9 # Reguläre Sequenz erzeugen 1:5 #&gt; [1] 1 2 3 4 5 # Wiederholt 2 ganze 3-mal in 5 Schleifen rep(x = 2, times = 5, each = 3) #&gt; [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 # Überblick über die erzeugten Daten # Vektor in var1 speichern var1 &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) # Ersten 6 Elemente in var1 head(x = var1, n = 6) #&gt; [1] 1 2 3 4 5 6 # Letzten 4 Elemente in var1 tail(x = var1, n = 4) #&gt; [1] 7 8 9 10 # Alle Elemente in var1 print(x = var1) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 # Daten transformieren var2 &lt;- c(1.222, 2.333, 3.444) # var2 wird auf eine Nachkommastelle gerundet round(x = var2, digits = 1) #&gt; [1] 1.2 2.3 3.4 Wir wollen uns die Variable y etwas genauer ansehen. y enthält durch das Aufrufen der Funktion c() eine Reihe von Zahlen (1.222 bis 3.444) mit drei Nachkommastellen. Diese Zahlen wollen wir mit der Funktion round() auf eine Nachkommastelle runden. Das Argument digits beschreibt damit die Rundungszahl nach dem Komma. digits = 1 löst eine Rundung der Nachkommastellen auf die erste Nachkommastelle aus. Der Wert im Argument digits kann damit theoretisch von 0 bis ∞ variieren. 2.2.1 Verschachtelung von Funktionen Zudem können wir beliebig viele Funktion ineinander verschachteln, d.h. wir können den Output einer Funktion einer anderen Funktion als Input übergeben. Wir bilden zuerst einen Vektor, runden die Zahlen und lassen uns dann nur die ersten drei Zahlen ausgeben. # Mehrere Funktionen hintereinander var1 &lt;- c(1.11, 1.22, 1.33, 1.44, 1.55) var1 &lt;- round(x = var1, digits = 1) head(x = var1, n = 3) #&gt; [1] 1.1 1.2 1.3 # jetzt in einer verschachtelten Funktion head(x = round(x = c(1.11, 1.22, 1.33, 1.44, 1.55), digits = 1), n = 3) #&gt; [1] 1.1 1.2 1.3 # kürzeste Form head(round(c(1.11, 1.22, 1.33, 1.44, 1.55), digits = 1), n = 3) #&gt; [1] 1.1 1.2 1.3 # Mit var1 als Dateninput head(round(var1, digits = 1), n = 3) #&gt; [1] 1.1 1.2 1.3 Die Funktionen werden immer in Reihenfolge von innen nach außen ausgeführt. In unserem Beispiel also erst c(), dann round() und dann head(). Jede Funktion gibt ihren Wert an die nächste Funktion weiter. Anmerkung: Die Funktion head() enthält zwei Argumente mit “default”-Werten: keepnums und addrownums. Beide bekommen automatisch (“default”) den Wert NULL und müssen damit nicht ausgeschrieben werden. Sie werden für unsere Anwendung auch nicht gebraucht und damit nicht angepasst. Vorteile von verschachtelten Funktionen: Es können unendlich viele Funktionen verschachtelt werden. Wir müssen Argumente nicht ausschreiben, solange sie eindeutig von der Funktion erkannt werden können. So gibt es in allen genutzten Funktionen mit x = nur eine Schnittstelle für die Dateneingabe. Weiterhin können wir so unseren Code in eine Kette von Befehlen verwandeln, die nur einen Output (ein Objekt) ausgibt. Die Objektstruktur wird damit übersichtlicher. Nachteil: Wenn wir mehrere Funktionen ineinander verschachteln, kann unser Code schnell unlesbar werden. Natürlich könnten wir die einzelnen Zwischenschritte speichern, wie im Beispiel weiter oben, aber dann definieren wir eine Menge Variablen, welche wir vielleicht gar nicht benötigen. Wir werden im Kapitel über Datentransformation einen neuen Operator kennenlernen, welcher eine sehr elegante Lösung für dieses Problem bietet. 2.3 Objekte und Datentypen In R kann alles als Objekt in Variablen gespeichert werden. Einzelne Werte / Mehrere Werte (z.B. ein Datensatz mit Rohdaten) Tabellen Statistische Modelle Ergebnisse statitischer Analysen Funktionen, etc. Anmerkung: Objekte sind nicht gleich Variablen, da Objekte nicht gespeichert werden müssen. Ein Objekt wird erst dann zur Variable, wenn es eine Bezeichnung über &lt;- erhält und damit gespeichert wird. Die Zahlenfolge aus c(1, 2, 3) stellt auch schon ein Objekt da. In R gibt es eine Vielzahl von verschiedenen Objekttypen. Die grundlegenden Objekttypen sind: 2.3.1 Vektoren (vector) Vektoren → ordinale/metrische Variablen numeric (Zahlen) character (Buchstaben) logical (Richtig oder Falsch) Beispiel # Numerischer Verktor (numeric vector) var1 &lt;- c(1, 2, 3, 4, 5) var1 #&gt; [1] 1 2 3 4 5 # Buchstaben Vektor (character vector) var2 &lt;- c(&quot;Peter&quot;, &quot;Yusuf&quot;, &quot;Sarah&quot;, &quot;Aayana&quot;) var2 #&gt; [1] &quot;Peter&quot; &quot;Yusuf&quot; &quot;Sarah&quot; &quot;Aayana&quot; # Logischer Vektor (logical vector) var3 &lt;- c(TRUE, FALSE, NA) var3 #&gt; [1] TRUE FALSE NA Tipp: TRUE bzw. FALSE können mit T bzw. F abgekürzt werden. Vektoren stellen die fundamentalen Datentypen dar. Alle weiteren Datentypen bauen auf diesen auf. Zudem müssen Vektoren aus denselben Elementen bestehen, d.h. wir können keine logical und character Elemente in einem Vektor mischen. Sie bilden damit die atomare Struktur in R. numeric vector: Die häufigste Datenform in R. Numerische Vektoren lassen sich zudem weiter unterteilen, in integer (ganze Zahlen) und double (reele Zahlen - Kommazahlen). Zahlen werden in R praktisch immer als double abgelegt (auch die ganzen Zahlen) und müssen somit nie für Berechungen gewandelt werden. character vector: Die Elemente dieses Typs bestehen aus Zeichen, welche von Anführungszeichen umgeben werden (entweder ’ oder \" ). Sie werden auch strings genannt. Anmerkung: Anführungszeichen dienen in R zur Kennzeichnung von nicht numerischen Werten. Wir müssen also alle natürlichen Worte in jedem Kontext in Anführungszeichen schreiben. logical vector: Die Elemente dieses Typs können nur 3 Werte annehmen:TRUE, FALSE oder NA. Logische Vektoren lassen sich auch numerisch übersetzen in TRUE = 1 und FALSE = 0, damit werden sie auch als integer abgelegt. Das wird vor allem bei der Datenselektion relevant. Anmerkung: NA steht für fehlende Werte. Vektoren haben folgend drei Eigenschaften: # Modus bzw. Struktur (mode) - Was ist es? typeof(var1) #&gt; [1] &quot;double&quot; # Länge - Wie viele Elemente? length(var1) #&gt; [1] 5 # Attribute (optional) - Zusätzliche Informationen (Metadaten) attributes(var1) # x wurden noch keine attribute zugeordnet #&gt; NULL # ------ Zusatz ------ # Objektbestimmung class(var1) #&gt; [1] &quot;numeric&quot; Nun wollen wir auf die einzelnen Elemente in den Vektoren zugreifen (indizieren). Wir können die einzelnen Elemente eines Vektor mit [] anwählen (subsetting). zahlenreihe &lt;- c(1, 2.5, 3, 4, 5.77, 6, 7) # Das erste Element zahlenreihe[1] #&gt; [1] 1 # das fünfte Element zahlenreihe[5] #&gt; [1] 5.77 # Das letzte Element zahlenreihe[length(zahlenreihe)] #&gt; [1] 7 # Mit - (Minus) können wir gezielt Elemente ausschließen zahlenreihe[-4] #&gt; [1] 1.00 2.50 3.00 5.77 6.00 7.00 # Wir können auch Sequenzen auswählen zahlenreihe[2:5] #&gt; [1] 2.50 3.00 4.00 5.77 # Wir können auch gezielt mehrere Elemente ausschließen oder auswählen zahlenreihe[-c(1, 4)] #&gt; [1] 2.50 3.00 5.77 6.00 7.00 zahlenreihe[c(1, 2, 5)] #&gt; [1] 1.00 2.50 5.77 # Das Gleiche funktioniert auch mit einem character vector buchstabenreihe &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;) buchstabenreihe[1] #&gt; [1] &quot;A&quot; 2.3.2 Faktoren (factor) Faktoren → nominale/ordinale Variablen nominale Variable Kategorien des Faktors = levels (kann Zahlen oder Buchstaben enthalten) Bisher haben wir numeric, character und logical Vektoren kennengelernt. Ein weiterer Objekttyp wird benötigt, um kategoriale Daten oder Gruppierungsvariablen darzustellen. Dieser Objekttyp wird factor genannt. Ein Faktor ist ein Vektor mit ganze Zahlen (integer), welcher eine Beschriftung für die einzelnen Fakttorstufen (levels) besitzt. Die Beschriftungen sind letztlich Attribute (attributes), die Informationen über die Faktorstufen geben. Ein Beispiel: # Geschlecht als character vector sex &lt;- c(&quot;Mann&quot;, &quot;Frau&quot;, &quot;Mann&quot;, &quot;Frau&quot;, &quot;Frau&quot;, &quot;Div&quot;) sex #&gt; [1] &quot;Mann&quot; &quot;Frau&quot; &quot;Mann&quot; &quot;Frau&quot; &quot;Frau&quot; &quot;Div&quot; # Modus (mode) typeof(sex) #&gt; [1] &quot;character&quot; # Attribute attributes(sex) #&gt; NULL Nun haben wir einen character vector mit Informationen über Geschlechter. In einem nächsten Schritt wollen wir diesen Vektor als Faktor definieren. # Geschlecht als Faktor sexf &lt;- factor(sex, levels = c(&quot;Mann&quot;, &quot;Frau&quot;, &quot;Div&quot;)) sexf #&gt; [1] Mann Frau Mann Frau Frau Div #&gt; Levels: Mann Frau Div # Geschlecht hat nun den Datentyp integer typeof(sexf) #&gt; [1] &quot;integer&quot; # und die Klasse &quot;factor&quot; class(sexf) #&gt; [1] &quot;factor&quot; # jetzt sind auch die Attribute definiert attributes(sexf) #&gt; $levels #&gt; [1] &quot;Mann&quot; &quot;Frau&quot; &quot;Div&quot; #&gt; #&gt; $class #&gt; [1] &quot;factor&quot; Wir haben bei der Definition die levels explizit angegeben. Das hätten wir aber nicht machen müssen. R ordnet standardmäßig alle Faktorstufen alphabetisch zu. # Geschlecht als Faktor sexf2 &lt;- factor(sex) sexf2 #&gt; [1] Mann Frau Mann Frau Frau Div #&gt; Levels: Div Frau Mann # Datentyp typeof(sexf2) #&gt; [1] &quot;integer&quot; # Klasse class(sexf2) #&gt; [1] &quot;factor&quot; # Attribute attributes(sexf2) #&gt; $levels #&gt; [1] &quot;Div&quot; &quot;Frau&quot; &quot;Mann&quot; #&gt; #&gt; $class #&gt; [1] &quot;factor&quot; Wir werden Faktoren später häufig bei der Modellierung benötigen z.B. bei Regressionsmodellen mit Dummyvariablen. Die erste Stufe eines Faktors wird von R automatisch als Referenzkategorie bestimmt, wenn wir den Faktor als Prädiktorvariable in ein Modell einbringen. Manchmal wollen wir jedoch eine andere Stufe als Referenzkategorie. In diesem Fall kann man die Reihenfolge der Faktorstufen ändern. Über relevel() kann direkt die Refrenzkategorie bestimmt werden. # Unsere Refrenzkategorie ist gegenwärtig &quot;Mann&quot; levels(sexf) #&gt; [1] &quot;Mann&quot; &quot;Frau&quot; &quot;Div&quot; # Wir ändern die Refrenkategorie folgend auf &quot;Frau&quot; sexf &lt;- relevel(sexf, ref = &quot;Frau&quot;) levels(sexf) #&gt; [1] &quot;Frau&quot; &quot;Mann&quot; &quot;Div&quot; Mit der Funktion factor() lassen sich alle Faktorstufen frei ordnen, solange wir im Befehl alle Faktorstufen benutzen. Die erste Stufe wird folglich zur Refrenzkategorie. # Unsere Refrenzkategorie ist gegenwärtig &quot;Frau&quot; levels(sexf) #&gt; [1] &quot;Frau&quot; &quot;Mann&quot; &quot;Div&quot; # Wir ändern die Refrenkategorie durch die neue Auflistung unserer level auf &quot;Mann&quot; sexf &lt;- factor(sexf, levels = c(&quot;Mann&quot;, &quot;Frau&quot;, &quot;Div&quot;)) levels(sexf) #&gt; [1] &quot;Mann&quot; &quot;Frau&quot; &quot;Div&quot; Durch die Festlegung einer Variable als Faktor wird diese automatisch dummykodiert und kann umstandslos in ein Modell einbezogen werden. Wir müssen nur die Refrenzkategorie im Blick behalten. 2.3.3 Datensatz (data frame) Datensatz (mehrere Zeilen und Spalten) Spalten (Vektoren und Faktoren) Zeilen (Fälle, z. B. Versuchspersonen) Nun kommen wir zu dem für uns wichtigsten Objekt in R, dem Datensatz. Ein Datensatz besteht aus Zeilen (rows) und Spalten (columns) gleicher Länge und entspricht einem Datensatz in SPSS. Die Spalten eines Datensatz sind lediglich Vektoren. Sie können damit numeric, character und logical sein, oder als factor auftreten. Numerische Variablen in einem Datensatz sollten demzufolge numerische Vektoren und kategoriale Variablen/Gruppierungsvariablen sollten Faktoren sein. Durch die Mischung von Datentypen innerhalb des Objekts “Datensatz” sprechen wir auch von einer rekursiven Struktur. Datensätze werden traditionell über die Funktion data.frame() definiert. Da wir das tidyverse nutzen, greifen wir auf eine weiterentwickelte Form zurück - tibbles oder tbl. tibbles werden über die Funktion tibble() definiert und erleichtern so die Arbeit mit dem Datensatz. Anmerkung: Der Vorteil liegt beim Einlesen von Datensätzen, da weniger Rücksicht auf die Datenstruktur genommen werden muss. Durch tibbles wird viel durch R automatisiert. Erstellung eines Datensatz. # Vektoren sex &lt;- factor(c(&quot;Mann&quot;, &quot;Frau&quot;, &quot;Mann&quot;, &quot;Mann&quot;, &quot;Frau&quot;, &quot;Mann&quot;)) alter &lt;- c(22, 45, 67, 87, 16, 56) # Datensatz datensatz &lt;- tibble(sex, alter) datensatz #&gt; # A tibble: 6 x 2 #&gt; sex alter #&gt; &lt;fct&gt; &lt;dbl&gt; #&gt; 1 Mann 22 #&gt; 2 Frau 45 #&gt; 3 Mann 67 #&gt; 4 Mann 87 #&gt; 5 Frau 16 #&gt; 6 Mann 56 Unser datensatz ist damit ein Datensatz mit zwei Variablen (sex und alter) und sechs Fällen (rows). Dieser wird uns entsprechend im Environment angezeigt. Ein Datensatz hat die Attribute names(), colnames() und rownames() - [names() und colnames() bedeuten dasselbe]. attributes(datensatz) #&gt; $names #&gt; [1] &quot;sex&quot; &quot;alter&quot; #&gt; #&gt; $row.names #&gt; [1] 1 2 3 4 5 6 #&gt; #&gt; $class #&gt; [1] &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; Wir können zudem sowohl die Länge des Spaltenvektors (Anzahl der Spalten) über ncol abfragen, wie auch die Länge des Zeilenvektors (Anzahl der Fälle) über nrow. ncol(datensatz) #&gt; [1] 2 nrow(datensatz) #&gt; [1] 6 2.3.3.1 Datensatz indizieren (subsetting) Ein Datensatz ist eine 2-dimensionale Struktur aus Spalten und Fällen, die entsprechend indiziert werden kann. Einzelne Spalten können über $ ausgewählt werden. Einzelne oder mehrere Elemente, ob Spalten oder Zeilen, können über [] ausgewählt werden. # Spaltenname zur Auswahl einer spezifischen Variable über $ datensatz$sex #&gt; [1] Mann Frau Mann Mann Frau Mann #&gt; Levels: Frau Mann # Spaltenname zur Auswahl einer spezifischen Variable über [] datensatz[&quot;sex&quot;] #&gt; # A tibble: 6 x 1 #&gt; sex #&gt; &lt;fct&gt; #&gt; 1 Mann #&gt; 2 Frau #&gt; 3 Mann #&gt; 4 Mann #&gt; 5 Frau #&gt; 6 Mann # Nach Position auswählen datensatz[2] #&gt; # A tibble: 6 x 1 #&gt; alter #&gt; &lt;dbl&gt; #&gt; 1 22 #&gt; 2 45 #&gt; 3 67 #&gt; 4 87 #&gt; 5 16 #&gt; 6 56 Wir können aber auch mehrer Variablen und sogar Zeilen (Fälle) auswählen. Sobald wir die Werte in [] durch ein Komma trennen, gibt der erste Wert die Zeilen und der zweite die Spalten an. Ohne Komma nur die Spalten. # Erste Spalte und erste Zeile datensatz[1, 1] #&gt; # A tibble: 1 x 1 #&gt; sex #&gt; &lt;fct&gt; #&gt; 1 Mann # Erster Fall über alle Spalten (Variablen) datensatz[1, ] #&gt; # A tibble: 1 x 2 #&gt; sex alter #&gt; &lt;fct&gt; &lt;dbl&gt; #&gt; 1 Mann 22 # Alle Zeilen in der ersten Spalte datensatz[, 1] #&gt; # A tibble: 6 x 1 #&gt; sex #&gt; &lt;fct&gt; #&gt; 1 Mann #&gt; 2 Frau #&gt; 3 Mann #&gt; 4 Mann #&gt; 5 Frau #&gt; 6 Mann # Wir können auch Sequenzen benutzen # Ersten drei Fälle über alle Spalten datensatz[1:3, ] #&gt; # A tibble: 3 x 2 #&gt; sex alter #&gt; &lt;fct&gt; &lt;dbl&gt; #&gt; 1 Mann 22 #&gt; 2 Frau 45 #&gt; 3 Mann 67 # Da die Spalten Vektoren sind, können wir diese genauso indizieren # Erster Fall im Vektor zu Geschlecht datensatz$sex[1] #&gt; [1] Mann #&gt; Levels: Frau Mann # Letzten drei Fälle in der Variable alter datensatz$alter[4:length(datensatz$alter)] #&gt; [1] 87 16 56 # Die Spalten sex und alter datensatz[c(&quot;sex&quot;, &quot;alter&quot;)] #&gt; # A tibble: 6 x 2 #&gt; sex alter #&gt; &lt;fct&gt; &lt;dbl&gt; #&gt; 1 Mann 22 #&gt; 2 Frau 45 #&gt; 3 Mann 67 #&gt; 4 Mann 87 #&gt; 5 Frau 16 #&gt; 6 Mann 56 2.3.4 Listen (list) Listen → in SPSS nicht vorhanden Kombination mehrerer Objekte Listen können beliebige Objekte enthalten, auch Objekte verschiedenen Typs. Im Unterschied zu Datensätzen können auch Objekte unterschiedlicher Länge gespeichert werden. Ein weiterer Datentyp ist list. Während Datensätze schon aus verschiedenen Vektoren bestehen können, lassen sich diese in Listen auch in verschiedenen Längen ablegen. Die meisten Objekte die wir im Verlauf unserer R Anwendung kennenlernen werden, sind damit Listen (z.B. die Ergebnisse eines Regressionsmodells werden als Liste gespeichert). Wir müssen aber nur mit ihnen umgehen können und sie verstehen. Wir werden sie praktisch nie selbst erstellen müssen. In einem ersten Schritt wollen wir dennoch mit der Funktion list() eine Liste definieren. So können wir schrittweise verstehen, welche Eigenschaften Listen besitzen. list1 &lt;- list(1:3, &quot;a&quot;, c(1.22, 2, 3.44, 4, 5), c(TRUE, FALSE, FALSE)) list1 #&gt; [[1]] #&gt; [1] 1 2 3 #&gt; #&gt; [[2]] #&gt; [1] &quot;a&quot; #&gt; #&gt; [[3]] #&gt; [1] 1.22 2.00 3.44 4.00 5.00 #&gt; #&gt; [[4]] #&gt; [1] TRUE FALSE FALSE Wir haben mit der Variable list1 eine Liste erstellt, die als Elemente einen numeric Vektor mit einer Zahlenreihe, einen character Vektor mit der Länge 1 (L1), einen numericVektor mit Kommazahlen und einen logical Vektor speichert. Listen können wie Vektoren indiziert werden. # Erstes Element in der Liste (erster Vektor) list1[1] #&gt; [[1]] #&gt; [1] 1 2 3 # Zweites Element (zweiter Vektor) list1[2] #&gt; [[1]] #&gt; [1] &quot;a&quot; # Drittes Element (dritter Vektor) list1[3] #&gt; [[1]] #&gt; [1] 1.22 2.00 3.44 4.00 5.00 Häufig sind die Elemente in einer Liste als Variablen benannt und können entsprechend wie in einem Datensatz über $ abgerufen werden. list2 &lt;- list(var1 = c(1, 2, 3), var2 = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;), var3 = c(TRUE, FALSE), var4 = seq(from = 1, to = 100, by = 5)) # Ganze Liste abrufen list2 #&gt; $var1 #&gt; [1] 1 2 3 #&gt; #&gt; $var2 #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; #&gt; #&gt; $var3 #&gt; [1] TRUE FALSE #&gt; #&gt; $var4 #&gt; [1] 1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96 # Aufruf der ersten Variable mit ihrem Namen var1 list2$var1 #&gt; [1] 1 2 3 # Aufruf der zweiten Variable mit ihrem Namen var2 list2$var2 #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; # Objektbestimmung typeof(list2) #&gt; [1] &quot;list&quot; Im Environment gibt sich folgende Datenstruktur. Wichtig! Elemente in Listen können unendlich “gestapelt” werden und folgend mit einer Verschränkung des [] Operator “entpackt” werden. list3 &lt;- list(list1 = list1, list2 = list(var1 = c(1, 2, 3, 4, 5), var2 = &quot;a&quot;), var1 = 1:100) # Liste1 aus Liste3 entpacken list3$list1 #&gt; [[1]] #&gt; [1] 1 2 3 #&gt; #&gt; [[2]] #&gt; [1] &quot;a&quot; #&gt; #&gt; [[3]] #&gt; [1] 1.22 2.00 3.44 4.00 5.00 #&gt; #&gt; [[4]] #&gt; [1] TRUE FALSE FALSE # var1 aus liste1 in liste3 entpacken list3$list1[1] #&gt; [[1]] #&gt; [1] 1 2 3 # var2 aus liste2 in liste3 entpacken list3$list2$var2 #&gt; [1] &quot;a&quot; # Erster Wert aus var1 in list1 über list3 entpacken list3$list1[[1]][1] #&gt; [1] 1 2.3.5 Weitere Datentypen R kennt noch zwei weitere Datentypen (Matrizen und Arrays), die wir in diesem Kurs ausklammern werden. Sofern interesse besteht, verweisen wir auf das Buch von Hadley Wickham: Advanced R. "],["datenverarbeitung.html", "3 Datenverarbeitung 3.1 Vorbereitung 3.2 Datensatz importieren 3.3 Transformation und Manipulation von Daten", " 3 Datenverarbeitung In diesem Kapitel werden wir in einem ersten Schritt das Einlesen von Datensätzen in den geläufigen Datenstrurkturen kennenlernen, um in einem zweiten Schritt die Daten nach unseren Vorstellungen zu modifizieren. Tipp: Zur Erstellung eigener Datensätze empfehlen wir das Kapitel Datensätze selber erstellen von Andrew Ellis und Boris Mayer. 3.1 Vorbereitung Wir wollen mit dem Allbus-Datensatz (Allgemeine Bevölkerungsumfrage der Sozialwissenschaften) von 2018 arbeiten. Dieser lässt sich über GESIS unter: Allbus 2018 herunterladen. Anmerkung: Der Allbus 2018 ist eine standardisierte Bevölkerungsbefragung mit überproportionaler Repräsentanz von Befragten aus den neuen Bundesländern. Um diesem Umstand gerecht zu werden, müssen die Daten des Allbus gewichtet werden. Eine ideale Voraussetzung für diesen Kurs. Wir wollen unserem Anspruch einer zielgerichteten und forschungspraktischen Anwendung von R auch während der Bearbeitung des Allbus 2018, als Datengrundlage, gerecht werden. So greifen wir auf vergangene Forschungspublikationen zurück. Diese erlauben uns eine Orientierungslinie für kommende Beispiele zu ziehen. Folgend erstellen wir ein Projekt in RStudio (siehe 1.8.1). Sobald der Projektordner erstellt wurde, schieben wir unseren Datensatz in den Projektordner. Durch die Festlegung unseres Arbeitsverzeichnises im Projektordner, kann R direkt auf den Datensatz zugreifen. Der Reiter Files sollte entsprechend so aussehen: Abschließend erstellen wir ein RScript (siehe 1.8.2) und laden unsere Packete: tidyverse, strengejacke und easystats (siehe 1.6). Voila! Nun können wir den Datensatz einlesen. 3.2 Datensatz importieren Durch das Packet sjlabelled aus dem Packet strengejacke können wir drei verschiedene Dateiformate einlesen. .sav &gt; SPSS .dta &gt; Stata .sas &gt; SAS Da wir den Allbus 2018 in .sav vorliegen haben, benutzen wir die folgende Funktion. # SPSS allbus2018 &lt;- read_spss(&quot;ALLB2018.sav&quot;) Wichtig! Mit der Funktion read_spss() über das Packet sjlabelled werden alle fehlenden Werte zu NA konvertiert. Sofern Sie mit fehlenden Werten arbeiten wollen, empfehlen wir das Packet haven über die Funktion read_sav() und dem Argument user_na = TRUE zu nutzen. Hier ist aber zu beachten, dass alle Vektoren unter der Klasse labelled_spss gespeichert werden. Das kann zu Problemen mit Funktionen aus externen Packeten führen. Eine Lösung wäre vorher die betreffenden Vektoren händisch in atomare Strukturen zu konvertieren (z.B. durch unlabel() aus sjlabelled). Zudem müssen dann alle fehlenden Werte händisch als NA makiert werden (set_na() aus sjlabelled). Dazu aber später mehr! Sollten Ihre Daten in .dta oder .sas vorliegen, können Sie die folgenden Befehle nutzen. # Stata allbus2018 &lt;- read_stata(&quot;Datensatz.dta&quot;) # SAS allbus2018 &lt;- read_sas(&quot;Datensatz.sas&quot;) Anmerkung: Sollten Sie andere Dateiformate nutzen wollen, bieten sich zudem die Packete haven, readxl und readr an. Die Funktion read_spss besitzt drei für uns relevante Argumente. Einen Überblick über die möglichen Argumente findet sich unter: ?read_spss. atomic.to.fac = TRUE &gt; Alle Variablen mit beschrifteten Ausprägungsmerkmalen werden zu Faktoren konvertiert. Für uns ist dieses Argument offensichtlich unbrauchbar, da wir viele Items vom Likert-Typ im Allbus 2018 vorfinden und diese als pseudo-metrisch behandeln wollen. drop.labels = TRUE &gt; Alle Ausprägungsmerkmale ohne Fälle werden gelöscht. Eine nützliche Funktion, sofern wir nicht mit fehlenden Werten arbeiten möchten. Durch read_spss() über das Packet sjlabelled wurden ohnehin alle vormalig fehlenden Werte zu NA konvertiert. So können wir die überflüssigen Ausprägungsmerkmale einfach löschen. verbose = TRUE &gt; Es wird beim Verarbeiten der Daten ein Fortschrittsbalken eingeblendet. Nur bei großen Datensätzen relevant. Damit empfehlen wir das Argument dop.labels mit TRUE bzw. T zu aktivieren. allbus2018 &lt;- read_spss(&quot;ALLB2018.sav&quot;, drop.labels = T) # Noch schnell den Allbus zum tibble transformieren allbus2018 &lt;- tibble(allbus2018) Hervorragend! Damit haben wir erfolgreich unsere Daten in R importiert. Um bearbeitete Datensätze zu speichern, bietet sich der folgende Befehl an. write_spss(allbus2018, path = &quot;allbus2018&quot;) Die Datei wird automatisch in unserem Projektordner abgelegt. Wir können aber auch über das Argument path einen neuen Speicherort definieren. 3.3 Transformation und Manipulation von Daten Wie Eingangs erwähnt, arbeiten wir in diesem Kurs mit den Ökosystemen tidyverse und strengejacke, um Daten umfänglich modifizieren zu können. Natürlich gibt es auch andere Möglichkeiten der Datenbearbeitung. Wir sind aber davon überzeugt, dass die “tidyverse-Methode,” an die sich auch strengejacke anschließt, eine sehr konsistente und eingängige Form des Arbeitens ermöglicht. Wie wir später noch sehen werden, erfordern viele Arten von statistischen Analysen und insbesondere Grafik-Funktionen einen Datensatz im long-Format. Der Allbus 2018 liegt im diesem Format vor. Dennoch muss mitunter erstaunlich viel Zeit für die Organisation von Daten für die weitere Analyse aufgewendet werden (diese Art von Arbeit wird oft als “data wrangling” bezeichnet). Sofern Sie einen Datensatz im wide-Format in ein long-Format transformieren wollen, empfehlen wir das Kapitel: Reshaping: tidyr von Andrew Ellis und Boris Mayer. 3.3.1 Erster Blick auf den Datensatz Nachdem wir unseren Datensatz eingelesen haben, wollen wir uns zu Beginn einen Überblick über die vorhandenen Daten verschaffen. Mit view() können wir den ganzen Datensatz als zusätzliches Fenster öffnen. view(allbus2018) Über den Befehl view_df() wird uns eine HTML-Version unseres Datensatzes im Viewer angezeigt. view_df(allbus2018) Der große Vorteil der zweiten Abbildung liegt offensichtlich in der reduzierten Darstellung. So können wir über die Spalte ID ablesen, welchen Wert unsere Variablen im Spaltenvektor des Datensatzes innehaben. Wir können entsprechend Variablen über diesen indizieren. Zudem wird uns die Variablenbezeichnung über Name, die Variablenbeschriftung über Label und die Ausprägungsmerkmale bzw. Spannweite über Values, sowie die Merkmalsbeschriftung über Value Labels ausgegeben. Weiterhin können wir über unsere zuvor erlernten “Grundfunktionen” einen Ausschnitt des Datensatzes generieren. # Ersten 3 Fälle head(allbus2018, n = 3) # Letzten 5 Fälle tail(allbus2018, n = 5) #Ganzer Datensatz print(allbus2018) Die Anwendung unserer Grundfunktionen hat gegenwärtig noch den großen Nachteil, dass R versucht alle Variablen unseres Datensatzes abzubilden. Um das in den Griff zu bekommen, wollen wir uns in den folgenden Kapiteln mit der Datensatztransformation und dann Datenmanipulation beschäftigen. 3.3.2 Pipe Operatoren In Kapitel 2.2.1 konnten wir schon sehen, dass es schnell unübersichtlich werden kann, wenn wir Funktionen ineinander verschachteln. Vor allem bei der Datenverarbeitung entsteht sehr schnell unübersichtlicher Code. Hierfür gibt es in R eine “ganz einfache” Lösung - Pipes. So lassen sich Sequenzen von Funktionen sehr elegant abbilden. Eine Pipe zeigt sich immer durch den %&gt;% Operator an. Um auf diesen zugreifen zu können, müssen wir eig. das Packet magrittr laden. Da aber die Packete des tidyverse den Operator automatisch laden, müssen wir zumindest in seiner einfachsten Form keinen zusätzlichen Aufwand betreiben. Nun wollen wir aber mit zwei weiteren Formen des Pipe-Operators arbeiten (%$% und %T&gt;%), die uns nur über das Laden von magrittr zur Verfügung gestellt werden. install.packages(&quot;magrittr&quot;) library(magrittr) Tipp: Um schnell auf den Pipe Operator zugreifen zu können, bietet sich das Tastenkürzel cmd bzw. strg + up + M an. Um einen ersten Einstieg zu schaffen, greifen auf unser Beispiel aus Kapitel 2.2.1 zurück. Hier haben wir den Vektor c(1.11, 1.22, 1.33, 1.44, 1.55), welcher in var1 gespeichert wurde, gerundet. # Vektor speichern in var1 var1 &lt;- c(1.11, 1.22, 1.33, 1.44, 1.55) # var1 runden round(var1, digits = 1) #&gt; [1] 1.1 1.2 1.3 1.4 1.6 In diesem Stadium ist unser Code noch sehr übersichtlich. Wir können aber auch schon jetzt eine Pipe zu Demonstrationszwecken bilden. # Vektor speichern in var1 var1 &lt;- c(1.11, 1.22, 1.33, 1.44, 1.55) # var1 runden var1 %&gt;% round(digits = 1) #&gt; [1] 1.1 1.2 1.3 1.4 1.6 Der Effekt ist für unser Beispiel klein, aber die Idee ist klar. Wir schreiben mit der Pipe also Funktionen nicht mehr als f(x) sondern als x %&gt;% f() bzw. x %&gt;% f. Wir reihen also unsere Funktionen aneinander, wir verschachteln sie nicht mehr. Im nächsten Schritt wollen wir unseren gerundeten Vektor in eine weitere Funktion übergeben, dann wird auch der Effekt dieses Vorgehens ersichtlich. Wir rufen zusätzlich mit head() die ersten drei Elemente unseres Vektors auf. # Vektor speichern in var1 var1 &lt;- c(1.11, 1.22, 1.33, 1.44, 1.55) # var1 runden und die ersten drei Elemente abrufen head(round(var1, digits = 1), n = 3) #&gt; [1] 1.1 1.2 1.3 # var1 runden und die ersten drei Elemente abrufen - Pipe var1 %&gt;% round(digits = 1) %&gt;% head(n = 3) #&gt; [1] 1.1 1.2 1.3 Wie wir sehen können, wird der Vektor var1 durch die Funktionen “weitergegeben.” Tatsächlich gibt jede Funktion ihren Output, also ihr Ergebnis, an die nächste weiter. Im ersten Beispiel passiert das von “innen nach außen.” Damit wird es schnell unübersichtlich, zumal anstrengend zu schreiben. In der Pipe hingegen, erzeugen wir eine lineare Übergabe von Funktion zu Funktion. Der Ablauf der Pipe in Kürze: Der Vektor aus var1 wird also an die Funktion round() weitergegeben und in dieser auf eine Nachkommastelle gerundet. Damit haben wir an diesem Punkt den Output: c(1.1, 1.2, 1.3, 1.4, 1.6). Im nächsten Schritt wird dieser Output an head() übergeben. In head() rufen wir nur die ersten drei Elemente ab, also c(1.1, 1.2, 1.3). Vorteile: Unser Code ist lesbarer Wir müssen keine unnötigen Variablen definieren Wir können diesen Prozess auch mit dem Platzhalter-Operator . veranschaulichen. Dieser steht immer für den Output aus der letzten Funktion. # Vektor speichern in var1 var1 &lt;- c(1.11, 1.22, 1.33, 1.44, 1.55) # var1 runden und die ersten drei Elemente abrufen - Pipe var1 %&gt;% round(x = ., digits = 1) %&gt;% head(x = ., n = 3) #&gt; [1] 1.1 1.2 1.3 Ziemlich schick, nicht wahr? Der Platzhalter lässt sich aber auch an jeder anderen Stelle in der Funktion als Wertcontainer einsetzen. # Vektor speichern in var1 var1 &lt;- c(1.11, 1.22, 1.33, 1.44, 1.55) # var1 runden und die ersten drei Elemente abrufen - Pipe 1 %&gt;% round(var1, digits = .) %&gt;% head(x = ., n = 3) #&gt; [1] 1.1 1.2 1.3 Wichtig! Wollen wir ohne einen Platzhalter arbeiten, muss das erste Argument der nachfolgenden Funktion den Output der vorherigen aufnehmen können - i.d.R. x = Daten (Datensatz oder Variablen). In den meisten Fällen ist auch das Objekt, welches übergeben wird, gleichzeitig das erste Argument der nächsten Funktion (vor allem für die tidyverse-Funktionen), so dass wir diesen Platzhalter selten brauchen werden. Wir haben alle Funktionen in diesem Kurs nach diesem Kriterium ausgewählt, um eine möglichst reibungslose Einarbeitung zu ermöglichen. Anmerkung: Der Verkettung von Funktionen ist damit praktisch kein Limit gesetzt, außer ein paar Regeln an die man sich halten sollte. Pipes sollten nicht genutzt werden, wenn die Pipe länger als 10 Schritte wäre, mehrere Inputs oder Outputs benötigt werden, eine komplexe Objektstruktur das Ziel ist. Der %$% Operatoren Für Funktionen, die auf Variablenebene arbeiten und keinen Datensatz als Dateninput erlauben, gibt es den %$% Operator. Wichtig! Wir brauchen diesen Operator aber nur für ganz wenige Funktionen. Die meisten Funktionen die auf Variablenebene arbeiten, besitzen gleichzeitig auch als erstes Argument eine Datensatz-Schnittstelle - x = Datensatz. Sie greifen dann über das zweite Argument auf die Variablen in diesem Datensatz zu. Der %$% Operator ermöglicht letztlich, dass wir gezielt einzelne Variablen aus dem Datensatz in der nächsten Funktion anwählen können, auch wenn es keine Datensatz-Schnittstelle gibt. In unserem Beispiel benötigt die Funktion ts.plot, als Grafik für Zeitachsenmessungen, eine Variable als Input - x = Variable. Es darf also kein Datensatz eingespeist werden. Folglich brauchen wir den %$% Operator, um auf Variablenebene operieren zu können. # Vektoren in Datensatz speichern var1 &lt;- c(1, 1, 2, 2, 2, 3, 3, 3, 3) var2 &lt;- c(8, 9, 1, 1, 2, 3, 4, 5, 4) ds1 &lt;- tibble(var1, var2) # Mit dem %$% Operator ds1 %$% ts.plot(var1) Der %T&gt;% Operator Dieser Operator ermöglicht es eine Pipe auch bei Funktionen ohne “inhaltlichen” Output weiterzuführen. Grafiken haben letztlich keinen Output außer der Grafikausgabe und würden so eine Verkettung von Funktionen beenden. Wollen wir aber zu unserer Grafik noch einen “inhaltlichen” Output, brauchen wir den %T&gt;% Operator. Dieser wird hinter den letzten Output geschrieben, auf den wir uns beziehen wollen. Unser Wert wird damit auch an die übernächste Funktion “weitergegeben.” Es wird also immer auf den linken Wert neben dem %T&gt;% Operator zugegriffen und dieser an alle folgenden Funktionen “weitergegeben.” var1 &lt;- c(1.11, 1.22, 1.33, 1.44, 1.55) var1 %&gt;% round(digits = 2) %T&gt;% plot() %&gt;% head(n = 3) #&gt; [1] 1.11 1.22 1.33 So können wir uns einen Grafikoutput, wie auch die ersten drei Elemente von unserem gerundeten Vektor ausgeben lassen. Hervorangend! Jetzt können wir mit der Restrukturierung unseres Datensatzes beginnen. 3.3.3 Datensätze restrukturieren Anmerkung: Ab jetzt werden wir mit dem Allbus 2018 arbeiten. Um die folgenden Befehle nachvollziehen zu können, sollte Sie den Datensatz entsprechend eingelesen haben. Gemäß unseres forschungspraktischen Anspruchs stammen die kommenden Variablen aus einer Untersuchung politischen Wissens (Moosdorf 2020) in Bearbeitung des Allbus 2018. Kurze Erläuterung des Forschungsinhalts R verspricht eine enorme Flexibilität im Umgang mit Daten. Unmittelbar spürbar wird dieser Umstand in der Reorganisation von Datensätzen in neuen Objekten (gezielt aufgebaute eigene Datensätze). So wollen wir in einem ersten Schritt lernen, wie wir Datensätze grob restrukturieren und anschließend die Daten in einem neuen Datensatz speichern können. Unser Ziel ist es also einen eigenen, auf unsere Bedürfnisse zugeschnittenen, Datensatz zu erzeugen. Hierfür straten wir mit den folgenden Funktionen: Packet Funktion Verwendung dplyr select() Selektieren von Variablen dplyr filter() Filtern nach Fällen mit spezifischer Ausprägung dplyr arrange() Sortiert Datensatz nach bestimmter Variable Das dplyr Package stellt Funktionen für alle diese Aufgaben zur Verfügung (und noch viele mehr, wir betrachten hier nur eine kleine Auswahl). dplyr besteht sozusagen aus Verben (Funktionen) für all diese Operationen, und diese Funktionen können - je nach Bedarf - auf sehr elegante Weise zusammengesetzt werden. Wir sehen uns nun der Reihe nach die verschiedenen Funktionen und deren Verwendung an. Wir verwenden immer den %&gt;% Operator. Der Input Datensatz ist dabei immer als erstes Argument der Funktion zu verstehen. Select() Mit der Funktion select() lassen sich Variablen aus einem Datensatz gezielt auswählen. Syntax: # Ohne Pipe select(datensatz, variable1, variable2:variable3, -variable4) # Mit Pipe datensatz %&gt;% select(variable1, variable2:variable3, -variable4) Mit dem Befehl select() wurden aus dem Datensatz datensatz die Variablen variable1, variable2 bis variable3 ausgewählt. variable4 wurde weggelassen. Beispielcode: # Nur Einstellung zu Leistungsprinzip (im19) im neuen Datensatz `df1` (ds1 &lt;- allbus2018 %&gt;% select(im19)) #&gt; # A tibble: 3,477 x 1 #&gt; im19 #&gt; &lt;dbl&gt; #&gt; 1 4 #&gt; 2 4 #&gt; 3 2 #&gt; 4 4 #&gt; 5 4 #&gt; 6 2 #&gt; 7 4 #&gt; 8 4 #&gt; 9 3 #&gt; 10 4 #&gt; # … with 3,467 more rows # Einstellungen zum Leistungsprinzip (im19) und Befürwortung von Ungleichheit - (im20) (ds2 &lt;- allbus2018 %&gt;% select(im19, im20)) #&gt; # A tibble: 3,477 x 2 #&gt; im19 im20 #&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 4 2 #&gt; 2 4 4 #&gt; 3 2 3 #&gt; 4 4 2 #&gt; 5 4 4 #&gt; 6 2 2 #&gt; 7 4 4 #&gt; 8 4 3 #&gt; 9 3 2 #&gt; 10 4 3 #&gt; # … with 3,467 more rows # Löschen von Befürwortung von Ungleichheit (im20) (ds2 &lt;- ds2 %&gt;% select(-im20)) #&gt; # A tibble: 3,477 x 1 #&gt; im19 #&gt; &lt;dbl&gt; #&gt; 1 4 #&gt; 2 4 #&gt; 3 2 #&gt; 4 4 #&gt; 5 4 #&gt; 6 2 #&gt; 7 4 #&gt; 8 4 #&gt; 9 3 #&gt; 10 4 #&gt; # … with 3,467 more rows # Einbezug aller Filter() Mit der Funktion filter() können wir eine Auswahl von Fällen treffen, die alle eine bestimmte Ausprägung einer Variable besitzen. Um unsere Daten ausgiebig filtern zu können, müssen wir uns kurz mit den logischen Operatoren in R beschäftigen. &lt; Kleiner &lt;= Kleiner gleich &gt; Grösser &gt;= Grösser gleich == Gleich (testet auf Äquivalenz) != Ungleich !x Nicht x (Verneinung) x | y x ODER y x &amp; y x UND y Die logischen Operatoren in R sind recht selbsterklärend und sollten bei eigener Anwendung recht schnell verstanden sein. Wir wollen uns ein paar Beispielen mit der Variable … widmen. Beispielcode: allbus2018 %&gt;% filter(german == 1) #&gt; # A tibble: 3,218 x 708 #&gt; za_nr doi version respid eastwest german ep01 ep03 ep04 ep06 lm01 #&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 5270 doi:10.… 2.0.0 (2… 1 1 1 1 2 2 3 6 #&gt; 2 5270 doi:10.… 2.0.0 (2… 2 2 1 2 4 3 3 7 #&gt; 3 5270 doi:10.… 2.0.0 (2… 3 1 1 2 2 3 2 2 #&gt; 4 5270 doi:10.… 2.0.0 (2… 4 2 1 2 2 3 3 7 #&gt; 5 5270 doi:10.… 2.0.0 (2… 5 2 1 3 2 3 2 7 #&gt; 6 5270 doi:10.… 2.0.0 (2… 6 1 1 1 3 3 2 3 #&gt; 7 5270 doi:10.… 2.0.0 (2… 7 1 1 3 2 3 3 7 #&gt; 8 5270 doi:10.… 2.0.0 (2… 8 1 1 2 3 3 2 2 #&gt; 9 5270 doi:10.… 2.0.0 (2… 9 1 1 1 2 4 3 3 #&gt; 10 5270 doi:10.… 2.0.0 (2… 10 2 1 2 2 2 3 7 #&gt; # … with 3,208 more rows, and 697 more variables: lm02 &lt;dbl&gt;, lm19 &lt;dbl&gt;, #&gt; # lm20 &lt;dbl&gt;, lm21 &lt;dbl&gt;, lm22 &lt;dbl&gt;, lm14 &lt;dbl&gt;, lm23 &lt;dbl&gt;, lm24 &lt;dbl&gt;, #&gt; # pa09 &lt;dbl&gt;, pa10 &lt;dbl&gt;, pa11 &lt;dbl&gt;, pa12 &lt;dbl&gt;, pa13 &lt;dbl&gt;, pa14 &lt;dbl&gt;, #&gt; # pa15 &lt;dbl&gt;, pa16 &lt;dbl&gt;, pa17 &lt;dbl&gt;, pa08a &lt;dbl&gt;, pa18 &lt;dbl&gt;, pa19 &lt;dbl&gt;, #&gt; # pp06 &lt;dbl&gt;, pp07 &lt;dbl&gt;, pp08 &lt;dbl&gt;, pp09 &lt;dbl&gt;, pp10 &lt;dbl&gt;, pp12 &lt;dbl&gt;, #&gt; # pp17 &lt;dbl&gt;, pp18 &lt;dbl&gt;, pp19 &lt;dbl&gt;, pp20 &lt;dbl&gt;, pp22 &lt;dbl&gt;, pp60 &lt;dbl&gt;, #&gt; # pp23 &lt;dbl&gt;, pp61 &lt;dbl&gt;, pp62 &lt;dbl&gt;, pp24 &lt;dbl&gt;, pp25 &lt;dbl&gt;, pp26 &lt;dbl&gt;, #&gt; # pp27 &lt;dbl&gt;, pp28 &lt;dbl&gt;, pp30 &lt;dbl&gt;, pp35 &lt;dbl&gt;, pp36 &lt;dbl&gt;, pp37 &lt;dbl&gt;, #&gt; # pp38 &lt;dbl&gt;, pp40 &lt;dbl&gt;, pp70 &lt;dbl&gt;, pp41 &lt;dbl&gt;, pp71 &lt;dbl&gt;, pp72 &lt;dbl&gt;, #&gt; # pa20 &lt;dbl&gt;, pa03 &lt;dbl&gt;, pa04 &lt;dbl&gt;, pt01 &lt;dbl&gt;, pt02 &lt;dbl&gt;, pt03 &lt;dbl&gt;, #&gt; # pt04 &lt;dbl&gt;, pt08 &lt;dbl&gt;, pt09 &lt;dbl&gt;, pt10 &lt;dbl&gt;, pt11 &lt;dbl&gt;, pt12 &lt;dbl&gt;, #&gt; # pt14 &lt;dbl&gt;, pt15 &lt;dbl&gt;, pt19 &lt;dbl&gt;, pt20 &lt;dbl&gt;, pa21 &lt;dbl&gt;, pd11 &lt;dbl&gt;, #&gt; # pe01 &lt;dbl&gt;, pe02 &lt;dbl&gt;, pe04 &lt;dbl&gt;, pe05 &lt;dbl&gt;, pe06 &lt;dbl&gt;, pe07 &lt;dbl&gt;, #&gt; # pe08 &lt;dbl&gt;, pe10 &lt;dbl&gt;, pe09 &lt;dbl&gt;, pe11 &lt;dbl&gt;, pe12 &lt;dbl&gt;, pe13 &lt;dbl&gt;, #&gt; # pd12 &lt;dbl&gt;, ps03 &lt;dbl&gt;, ps01 &lt;dbl&gt;, im19 &lt;dbl&gt;, im20 &lt;dbl&gt;, im21 &lt;dbl&gt;, #&gt; # im01 &lt;dbl&gt;, pa02a &lt;dbl&gt;, va01 &lt;dbl&gt;, va02 &lt;dbl&gt;, va03 &lt;dbl&gt;, va04 &lt;dbl&gt;, #&gt; # ingle &lt;dbl&gt;, pa01 &lt;dbl&gt;, pa22 &lt;dbl&gt;, pa23 &lt;dbl&gt;, pa24 &lt;dbl&gt;, pa25 &lt;dbl&gt;, #&gt; # pa26 &lt;dbl&gt;, pa27 &lt;dbl&gt;, … 3.3.4 Daten transformieren 3.3.5 Daten manipulieren Zur Manipulation/Bearbeitung unseres Datensatzes werden wir maßgeblich mit dem dplyr-Packet aus dem tidyverse und dem Packet sjmisc aus strengejacke arbeiten. Die folgende Auswahl kann nur einen Überblick über die “wichtigsten” Funktionen dieser Packete geben. Sofern Sie weitere Tranformationswünsche haben, sollten Sie unbedingt die Entwicklerseiten dieser Packete aufsuchen und nach geeigneten Funktionen suchen (siehe 1.6). Packet Funktion Verwendung dplyr rename() Umbenennen von Variablen dplyr mutate() Erstellen und verändern von vorhandenen Variablen dplyr group_by() Erstellt Gruppen (Teilmengen) dplyr summarize() Daten zusammenfassen dplyr distinct() Auswahl einzigartiger Werte dplyr case_when() Vektorisierter if-Befehl sjmisc rec() Rekodierung von Variablen sjmisc std() Z-Standardisierung von Variablen sjmisc center() Zentrierung von Variablen am Mittelwert sjmisc split_var() Aufspaltung von Variablen in n Gruppen sjmisc group_var() Aufspaltung von Variablen in Gruppen gleicher Spannweite sjmisc row_count() Zählung von Zeilenwerten sjmisc col_count() Zählung von Spaltenweten sjmisc row_sums() Summe der Zeilenwerte sjmisc row_means() Mittelwert der Zeilenwerte Referenz: Moosdorf, D. (2020): Kritik an sozialer Ungleichheit – Macht politisches Wissen den Unterschied?. In Tausendpfund, M. &amp; B. Westle (Hrsg.), Politisches Wissen in Deutschland: Empirische Analysen mit dem ALLBUS 2018 (S. 165–197). Wiesbaden: Springer VS. https://doi.org/10.1007/978-3-658-30492-8_6. "]]
